@model List<ESP.Models.Domains.Question>
<h1>Egzamin - Służba przygotowawcza</h1>
<td>
    <a></a>
    <br/>
    <a>Rozpocznij egzamin ze służby przygotowawczej.</a>
    <br />
    <a>Po zakończeniu egzaminu zostanie wygenerowany certyfikat</a>
    <br />
    <a></a>
</td>

@{
    var firstCategoryQuests = Model
    .Where(q => q.Category == 0)  // Wybierz tylko pytania z pierwszej kategorii
    .GroupBy(q => q.Category)
    .FirstOrDefault();

    if (firstCategoryQuests != null)
    {
        // Pobranie jednego losowego questu z pierwszej grupy
        var selectedQuest = firstCategoryQuests.OrderBy(q => Guid.NewGuid()).FirstOrDefault();

        if (selectedQuest != null)
        {
            //<td><a href="OneTest/@selectedQuest.Id">Test</a></td>
            <td>
                <form action="OneTest" method="get">
                    <input type="hidden" name="id" value="@selectedQuest.Id" />
                    <button type="submit" class="btn btn-primary">Zacznij Test</button>
                </form>
            </td>
        }
    }
}

@*

@using (Html.BeginForm("CheckAnswer", "Question"))
{
            // Grupowanie questów według kategorii
            var groupedQuests = Model.GroupBy(q => q.Category);

            foreach (var group in groupedQuests)
            {
                // Pobranie dwóch questów z każdej grupy
                var selectedQuests = group.OrderBy(q => Guid.NewGuid()).Take(2);

                foreach (var quest in selectedQuests)
                {
                <input type="hidden" name="questions[@quest.Id].Id" value="@quest.Id" />
                <input type="hidden" name="questions[@quest.Id].CorrectAnswer" value="@quest.CorrectAnswer" />
                <input type="hidden" name="questions[@quest.Id].Text" value="@quest.Text" />
                <input type="hidden" name="questions[@quest.Id].Category" value="@quest.Category" />
                <input type="hidden" name="questions[@quest.Id].AnswerA" value="@quest.AnswerA" />
                <input type="hidden" name="questions[@quest.Id].AnswerB" value="@quest.AnswerB" />
                <input type="hidden" name="questions[@quest.Id].AnswerC" value="@quest.AnswerC" />
                <input type="hidden" name="questions[@quest.Id].Creator" value="@quest.Creator" />
                <input type="hidden" name="questions[@quest.Id].CreationTime" value="@quest.CreationTime" />
            <table class="table">
                <tbody>
                    <tr>
                <th></th>
                    </tr>
                <tr>
                    <th>@quest.Text</th>
                </tr>
                <tr>
                <td>
                    <label>
                     <input type="radio" name="questions[@quest.Id].SelectedOption" value="1">
                    </label>
                    <b>A:</b> @quest.AnswerA
                    </td>
                    </tr>
                <tr></tr>
                <tr>
                <td>
                    <label>
                        <input type="radio" name="questions[@quest.Id].SelectedOption" value="2">
                    </label>
                    <b>B:</b> @quest.AnswerB
                    </td>
                    </tr>
                <tr></tr>
                    <tr>
                <td>
                    <label>
                      <input type="radio" name="questions[@quest.Id].SelectedOption" value="3">
                    </label>
                    <b>C:</b> @quest.AnswerC
                    </td>
                    </tr>
                <tr></tr>
                <tr></tr>
                </tbody>
            </table>
                }
            }

    <input type="submit" class="btn btn-primary" value="Wyślij">
        }

*@




@* 

<form method="post" action="Update" class="mt-5">
    @{
        // Grupowanie questów według kategorii
        var groupedQuests1 = Model.GroupBy(q => q.Category);

        foreach (var group in groupedQuests1)
        {
            // Pobranie dwóch questów z każdej grupy
            var selectedQuests = group.OrderBy(q => Guid.NewGuid()).Take(2);

            foreach (var quest in selectedQuests)
            {
    <div class="mb-3">
        <label for="" class="form-label">Id</label>
        <input type="text" class="form-control" asp-for="quest.Id" readonly>
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Question</label>
        <input type="text" class="form-control" asp-for="Text">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Creator Name</label>
        <input type="text" class="form-control" asp-for="Creator">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Question Category</label>
        <input type="text" class="form-control" asp-for="Category">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Answer A</label>
        <input type="text" class="form-control" asp-for="AnswerA">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Answer B</label>
        <input type="text" class="form-control" asp-for="AnswerB">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Answer C</label>
        <input type="text" class="form-control" asp-for="AnswerC">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Correct Answer</label>
        <input type="text" class="form-control" asp-for="CorrectAnswer">
    </div>
        <div class="mb-3">
    <label for="" class="form-label">Selected Option</label>
    <input type="text" class="form-control" asp-for="SelectedOption">
    </div> 
    <button type="submit" class="btn btn-primary">Submit</button>
                }
                }


                }
    <button type="submit" class="btn btn-danger" asp-action="Delete" asp-controller="Question">Delete</button>

</form> *@